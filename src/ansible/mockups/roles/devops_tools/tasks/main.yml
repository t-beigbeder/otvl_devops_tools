---
# mockups/roles/devops_tools/tasks/main.yml

- name: Here mockups/roles/devops_tools/tasks/main.yml
  include_role:
    name: commons
    tasks_from: check_vars
  when: values.debug

- name: Here mockups/roles/devops_tools/tasks/main.yml
  include_role:
    name: commons
    tasks_from: srv_dirs

- name: Install packages for devops automation
  ansible.builtin.apt:
    pkg:
      - git
      - virtualenv
      - python3-dev
      - gcc
      - rsync
      - sudo
      - unzip
      - python3-yaml
      - acl
    update_cache: "{{ values.prod }}"
    install_recommends: no
    state: present

- name: "Create devops user {{ values.config_vars.devops_user }}"
  ansible.builtin.user:
    name: "{{ values.config_vars.devops_user }}"
    append: true
    groups: ""
    shell: /bin/bash

- name: "Make devops user {{ values.config_vars.devops_user }} sudoer wo passwd"
  copy:
    content: "{{ values.config_vars.devops_user }} ALL=(ALL) NOPASSWD:ALL"
    dest: /etc/sudoers.d/devops_nopasswd
    mode: 0440

- name: Checkout git otvl_devops_tools once
  git:
    repo: "{{ values.config_vars.otvl_devops_tools_repo }}"
    version: "{{ values.config_vars.otvl_devops_tools_version }}"
    dest: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools"
    depth: 1
    update: false
    recursive: no
    force: no

- name: Create virtualenv otvl_devops_tools/venv
  command: "virtualenv -p python3 {{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/venv"
  args:
    creates: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/venv"

- name: Install requirements in virtualenv otvl_devops_tools/venv
  command: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/venv/bin/pip install -r {{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/src/python/requirements.txt"
  args:
    creates: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/venv/bin/ansible-playbook"

- name: Copy ansible configuration on the bastion
  copy:
    src: override/bastion/ansible/ansible.cfg
    dest: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_devops_tools/ansible.cfg"
    owner: "{{ values.config_vars.devops_user }}"
    group: "{{ values.config_vars.devops_user }}"
    mode: 0600

- name: Get stat of ansible inventory checkout
  ansible.builtin.stat:
    path: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_anprin"
  register: otvl_anprin_st
  when: values.config_vars.otvl_ans_inv_local_git_repo_tgz is defined

- name: Extract ansible inventory git repository on the bastion once
  unarchive:
    src: "{{ values.config_vars.otvl_ans_inv_local_git_repo_tgz }}"
    dest: "{{ values.config_vars.devops_home }}"
  when: otvl_anprin_st.stat.isdir is not defined and values.config_vars.otvl_ans_inv_local_git_repo_tgz is defined

- name: Checkout git ansible inventory from local repo once
  git:
    repo: "{{ values.config_vars.devops_home }}/otvl_anprin.git"
    dest: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_anprin"
    update: false
    recursive: no
    force: no
  when: otvl_anprin_st.stat.isdir is not defined and values.config_vars.otvl_ans_inv_local_git_repo_tgz is defined

- name: Checkout git ansible inventory from remote repo once
  git:
    repo: "{{ values.config_vars.otvl_ans_inv_repo }}"
    dest: "{{ values.config_vars.devops_home }}/locgit/otvl/otvl_anprin"
    version: "{{ values.config_vars.otvl_ans_inv_version }}"
    update: false
    recursive: no
    force: no
  when: values.config_vars.otvl_ans_inv_local_git_repo_tgz is not defined

- name: Give files read access to devops user
  ansible.builtin.file:
    dest: "{{ values.config_vars.devops_home }}"
    recurse: yes
    mode: ugo+rX

- name: "Add devops key as authorized for ssh localhost"
  ansible.posix.authorized_key:
    user: "{{ values.config_vars.devops_user }}"
    state: present
    key: "{{ lookup('file', 'override/bastion/ssh/id_rsa_devops.pub') }}"

- name: Copy ssh devops private key on the bastion
  copy:
    src: override/bastion/ssh/id_rsa_devops
    dest: "{{ values.config_vars.devops_home }}/.ssh/{{ values.config_vars.devops_key }}"
    owner: "{{ values.config_vars.devops_user }}"
    group: "{{ values.config_vars.devops_user }}"
    mode: 0600

- name: Copy ssh devops public key on the bastion
  copy:
    src: override/bastion/ssh/id_rsa_devops.pub
    dest: "{{ values.config_vars.devops_home }}/.ssh/{{ values.config_vars.devops_key }}.pub"
    owner: "{{ values.config_vars.devops_user }}"
    group: "{{ values.config_vars.devops_user }}"
    mode: 0600

- name: Create openstack configuration dir on the bastion
  file:
    path: "{{ values.config_vars.devops_home }}/.config/openstack"
    state: directory
    owner: "{{ values.config_vars.devops_user }}"
    group: "{{ values.config_vars.devops_user }}"
    mode: 0700

- name: Copy openstack configuration on the bastion
  copy:
    src: override/bastion/openstack/clouds.yaml
    dest: "{{ values.config_vars.devops_home }}/.config/openstack/clouds.yaml"
    owner: "{{ values.config_vars.devops_user }}"
    group: "{{ values.config_vars.devops_user }}"
    mode: 0600

- name: Copy ssh admin private key on the bastion
  copy:
    src: override/bastion/ssh/id_rsa_admin
    dest: "{{ values.config_vars.admin_home }}/.ssh/{{ values.config_vars.admin_key }}"
    owner: "{{ values.config_vars.admin_user }}"
    group: "{{ values.config_vars.admin_user }}"
    mode: 0600

- name: Copy ssh admin public key on the bastion
  copy:
    src: override/bastion/ssh/id_rsa_admin.pub
    dest: "{{ values.config_vars.admin_home }}/.ssh/{{ values.config_vars.admin_key }}.pub"
    owner: "{{ values.config_vars.admin_user }}"
    group: "{{ values.config_vars.admin_user }}"
    mode: 0600

###